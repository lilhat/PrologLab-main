CSC-325
Artificial Intelligence
Dr. Adam Wyner

Feb 2023

Lab 1

Feb 17, 2023
Last day to sign-off: Feb 24, 2023.

The practical has four parts, all of which must be completed to complete the lab.

Your work, solution, and code should be your own. If you discuss how to address the problem, use words and narratives.

To get signed off, you should:

* Show your code and solutions to a lecturer/demonstrator;
* Explain your code and solutions to a lecturers/ demonstrators.

Tip: refer to Learn Prolog Now! for further information, particularly sections on lists, cut, and negation as failure.

Caution: This is a text file, which hopefully does not contain any odd characters.... But, one never knows..
 
Part I

NOTE: Don't use lists to provide an answers to parts I-II. You can use a list to answer part III.

% SCENARIO:

% We are given the following knowledge base of travel information:

% KB:

byCar(auckland,hamilton).
byCar(hamilton,raglan).
byCar(valmont,saarbruecken).
byCar(valmont,metz).

byTrain(metz,frankfurt).
byTrain(saarbruecken,frankfurt).
byTrain(metz,paris).
byTrain(saarbruecken,paris).
           
byPlane(frankfurt,bangkok).
byPlane(frankfurt,singapore).
byPlane(paris,losAngeles).
byPlane(bangkok,auckland).
byPlane(losAngeles,auckland).

% PROBLEM:

% Write a predicate travel/2 which determines whether it is possible to travel 
% from one place to another by ‘chaining together’ car, train, and plane journeys.
% For example, your program should answer ‘yes’ to the query travel(valmont,raglan).
% Take care that your answers are valid.

% QUERIES:

% Can you get from Valmont to Raglan? 
%?- travel(valmont,raglan).
% Yes
% Where can you get from Valmont to? Give the first 9 answers.
% Are there any problems getting further results? Describe the problem.
% saarbruecken, metz, frankfurt, paris, bangkok, singapore, logAngeles, auckland, hamilton
% No problem getting further results, as long as there is a path to reach them. Results will be repeated until no path is left, false will then be returned.
% For
%?- travel(valmont, singapore)
% What are the means of travel; give this as a narrative answer.
% byCar(valmont,saarbruecken), byTrain(saarbruecken,frankfurt), byPlane(frankfurt,singapore).
% In order to travel from valmont to singapore, you would need to take a car from valmont to saarbruecken, then take a train from saarbruecken to frankfurt, then take a flight from frankfurt to singapore.

Part II

% SCENARIO:

% By using travel/2 from Part I to query the database, you can find out that 
% it is possible to go from Valmont to Raglan. What you would then really want to 
% know is what is the route to get from Valmont to Raglan.

% KB:

byCar(auckland,hamilton).
byCar(hamilton,raglan).
byCar(valmont,saarbruecken).
byCar(valmont,metz).

byTrain(metz,frankfurt).
byTrain(saarbruecken,frankfurt).
byTrain(metz,paris).
byTrain(saarbruecken,paris).
           
byPlane(frankfurt,bangkok).
byPlane(frankfurt,singapore).
byPlane(paris,losAngeles).
byPlane(bangkok,auckland).
byPlane(losAngeles,auckland).

% PROBLEM:

% Write a predicate travel/3 which tells you how to go (the path, not the means) from one place to another.
% Your answers to the queries below should paths, not simply answering ‘yes’ or ‘no’.
% Note the form of the query and answers, which should indicate the form of the predicate.

% QUERIES:

% Can you travel from Valmont to Paris via Metz?
%?- travel(valmont,paris,go(valmont,metz,go(metz,paris))).
%true.
% Yes
% What are the routes from Valmont to Los Angeles?
%?- travel(valmont,losAngeles,X).
%X = go(valmont, saarbruecken, go(saarbruecken, paris, go(paris, losAngeles))) ;
%X = go(valmont, metz, go(metz, paris, go(paris, losAngeles))) ;
%false.

% What would be a query which asks what cities would you need to pass through on a trip from valmont to losAngeles?
% ?- travel(valmont,losAngeles,X).
Part III

% SCENARIO:

% In the KB, we have direct trains from A to B. But, it is also
% reasonable to assume that one also has a direct train from B to A.

% KB:

directTrain(saarbruecken,dudweiler).
directTrain(forbach,saarbruecken).
directTrain(freyming,forbach).
directTrain(stAvold,freyming).
directTrain(fahlquemont,stAvold).
directTrain(metz,fahlquemont).
directTrain(nancy,metz).

% PROBLEM:

% Write a predicate to represent that where there is a train connection A to B,
% there is also a train connection from B to A.
% Write a predicate route/3 which gives you a list of towns that are visited by 
% taking the train from one town to another. Note that you will need to work with
% list structures and list procedures.
% Hint: you do not want redundant elements in your list, nor do you want ‘digressions’ not on the route.

% QUERIES:

% Here are some queries (expressed in Natural Language) that your solution should
% answer correctly.

% What is the route from Forbach to Metz?
%?- route(forbach,metz,Route).
%Route = [forback,freyming,stAvold,fahlquemont,metz]
%The point is that you have two endpoints, and you want to find the route. Once  you have a route, you can then also ask questions about what connects them.
% What cities are connected via the route through Saarbruecken,Forbach, Freyming, St Avold, Fahlquemont, and Metz?
%?- route(X,Y,[X,saarbruecken,forbach,freyming,stAvold,fahlquemont,metz,Y]).
%X = dudweiler,
%Y = nancy
%?- route(X,Z,[X,saarbruecken,forbach,Y,stAvold,fahlquemont,metz,Z]).
%X = dudweiler,
%Y = freyming,
%Z = nancy


Part IV

Describe all steps of backward chaining, where \+ is a symbol of negation as failure and starting hypothesis is C.

Knowledge base:

Rules:

Rule 1. A ^ B => C
Rule 2. \+X => A
Rule 3. D ^ F => X

MO: D, F, B

1. Hypothesis C
2. Check memory - C is not in M0
3. Find a rule (top down) with C as head - rule 1
4. Find a body of rule 1 and set them as new hypotheses (A and B)
5. Check memory - A is not in M0. Conditions for rule 1 not yet met
6. Find a rule with A as head - rule 2. Can A be proven?
7. Find body of rule 2 and set them as new hypotheses (\+X)
8. Check memory - X is not in M0
9. Check rules, X is head of rule 3, can X be proven?
10. Conditions are met, D and F are in M0
11. Add X to memory
12. Negate as failure of \+X means rule 2 cannot be met.
13. Body of rule 1 cannot be met, C cannot be proven.
MF: D, F, B, X

